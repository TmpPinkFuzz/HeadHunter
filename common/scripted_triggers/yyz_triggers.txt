
is_eligible_to_pull = {
  in_diplomatic_range = root                                 # range check
  NOT = { any_spouse  = { is_landed = yes } }                # no spouse is landed
  NOT = { any_consort = { is_landed = yes } }                # no consort is landed
  is_ruler = no                                              # not ruler
  is_landed = no                                             # not landed
  is_adult = yes                                             # is adult
  NOT = { has_council_position = councillor_court_chaplain } # no priests
  OR = {
    is_imprisoned = no                                       # either not imprisoned
    is_imprisoned_by = root                                  # or imprisoned by self    
  }
}

is_male_or_unattached_female = {
  OR = {                                                     # either male or not married/concubine
    is_female = no                           
    AND = {
      is_married = no                                        # not married
      is_concubine = no                                      # not consort
    }
  }
}

passes_sexFilter = {
  OR = {
    AND = { NOT = { root.var:yyz_filterSex = FILTER_SEX_MALE }    is_female = yes }  # females
    AND = { NOT = { root.var:yyz_filterSex = FILTER_SEX_FEMALE }  is_female = no }  # males
  }
}

passes_whereFilter = {
  OR = {
    AND = {
      root.var:yyz_filterWhereNot = 0
      OR = { NOT = { root.var:yyz_filterWhere = FILTER_WHERE_REALM }    target_is_liege_or_above = root }  # realm
      OR = { NOT = { root.var:yyz_filterWhere = FILTER_WHERE_COURT }    is_courtier_of = root  }           # court
    }
    AND = {
      root.var:yyz_filterWhereNot = 1
  OR = {
        root.var:yyz_filterWhere = FILTER_WHERE_NONE
        AND = { root.var:yyz_filterWhere = FILTER_WHERE_REALM  NOT = { target_is_liege_or_above = root } } # not in realm
        AND = { root.var:yyz_filterWhere = FILTER_WHERE_COURT  NOT = { is_courtier_of = root } }           # not in court
      }
    }
  }
}

passes_maritalFilter = {
  OR = {
    root.var:yyz_filterMarital = FILTER_MARITAL_BOTH
    AND = { root.var:yyz_filterMarital = FILTER_MARITAL_MARRIED   OR = { is_married = yes is_concubine = yes is_betrothed = yes any_consort = { is_alive = yes } } }
    AND = { root.var:yyz_filterMarital = FILTER_MARITAL_UNMARRIED is_married = no is_concubine = no is_betrothed = no   NOT = { any_consort = { is_alive = yes } } }
  }
}

passes_hookedFilter = {
  OR = {
    root.var:yyz_filterHooked = FILTER_HOOKED_BOTH
    AND = { root.var:yyz_filterHooked = FILTER_HOOKED_HOOK   root = { has_hook = prev } }
    AND = { root.var:yyz_filterHooked = FILTER_HOOKED_NOT    NOT = { root = { has_hook = prev } } }
  }
}

passes_nobilityFilter = {
  OR = {
    root.var:yyz_filterNobility = FILTER_NOBILITY_BOTH
    AND = { root.var:yyz_filterNobility = FILTER_NOBILITY_NOBLE   is_lowborn = no  }
    AND = { root.var:yyz_filterNobility = FILTER_NOBILITY_LOWBORN is_lowborn = yes }
  }
}

passes_inviteFilter = {
  OR = {
    root.var:yyz_filterInvite = 0
    will_accept_invite_to_court = { RECRUITER = $RECRUITER$ RECRUITEE = $RECRUITEE$ }
  }
}

passes_rankFilter = {
  highest_held_title_tier >= yyz_filterRank
}

passes_romanceRankFilter = {
  OR = {
    highest_held_title_tier >= yyz_filterRank
    AND = { 
      is_landed = no
      is_married = yes
      primary_spouse = {
        is_alive = yes 
        highest_held_title_tier >= yyz_filterRank 
      }
    }
  }
}

passes_romanceAcceptanceFilter = {
  scope:actor = {
    yyz_romance_success_chance >= yyz_filterAcceptance
  }

  NOT = {
    #Have I been blocked from targeting this character? #Permanent
    scope:recipient = {
      has_opinion_modifier = {
        modifier = seduce_permanent_blocker_opinion
        target = scope:actor
      }
    }
    #Time-limited blocker
    scope:recipient = {
      has_opinion_modifier = {
        modifier = seduce_regular_cooldown_opinion
        target = scope:actor
      }
    }
    #Have I already successfully romanced this person?
    scope:recipient = { has_opinion_modifier = { modifier = romance_scheme_courtship_opinion target = scope:actor } }

    #HARD-BLOCK: Incest Target is too young
    guaranteed_under_20_incest_rejection_trigger = { TARGET = scope:recipient SEDUCER = scope:actor }

    #We're already soulmates
    scope:actor = { has_relation_soulmate = scope:recipient }

    #You've been kicked out of bed
    scope:actor = { has_character_modifier = rejected_from_marriage_bed_modifier is_spouse_of = scope:recipient  }

    scope:recipient = { has_trait = intellect_bad_3 } # Implies a mental development level akin to an average child
    scope:recipient = { has_trait = incapable }       # Bed-ridden at best, but in many cases comatose or in a vegetative state
    
    # One of you is celibate
    scope:actor  = { has_trait = celibate }
    scope:recipient = { has_trait = celibate }
  }
}

passes_organizerTraitsFilter = {
  OR = {
    AND = { root.var:yyz_filterOrgSiege  = 1  has_trait = military_engineer }
    AND = { root.var:yyz_filterOrgLogi   = 1  has_trait = logistician }      
    AND = { root.var:yyz_filterOrgReaver = 1  has_trait = reaver }           
    AND = { root.var:yyz_filterOrgWinter = 1  has_trait = winter_soldier }   
    AND = { root.var:yyz_filterOrgSiege  = 0  root.var:yyz_filterOrgLogi = 0 root.var:yyz_filterOrgReaver = 0 root.var:yyz_filterOrgWinter = 0 }   
  }
}

passes_organizerSpeedFilter = {
  yyz_movement_speed >= root.var:yyz_filterOrgSpeed
}

will_accept_invite_to_court = {
  is_landed = no # yyz - would think that the trigger below would handle this, but no                      
  is_ruler  = no # yyz - would think that the trigger below would handle this, but no                      

  can_recruit_character_to_court_trigger = {
    RECRUITER = $RECRUITER$
    RECRUITEE = $RECRUITEE$
  }
  0 < yyz_inviteValue
#  0 < ai_accept:invite_to_court_interaction
}

# for some reason this code copied pretty much verbatim from the base game fails
dead_passes_legendPromoterFilter = {
  scope:actor.promoted_legend.legend_owner ?= scope:actor
  is_landed = yes                                                                                         # not the legend owner
  age >= 12                                                                                               
  is_physically_able = yes                                                                                # not incapable, etc
  NOT = { scope:actor = scope:recipient }                                                                 # not myself  
  NOT = { scope:recipient = { exists = promoted_legend } }                                                # not already promoting legend
  OR = {
    scope:recipient.dynasty = scope:actor.dynasty                                                         # dynasty member
    scope:recipient = { knows_language_of_culture = scope:actor.culture }                                 # shares language
    scope:actor = { has_friendly_relationship_with_character_trigger = { CHARACTER = scope:recipient } }  # friend/lover/soulmate/etc
    scope:recipient = {
      any_character_to_title_neighboring_county = {
        any_county_province = {
          any_province_legend = {
            this = scope:actor.promoted_legend
          }
        }
      }
    }
  }
}